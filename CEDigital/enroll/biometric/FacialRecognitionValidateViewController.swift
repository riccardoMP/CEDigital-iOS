//
//  FacialRecognitionValidateViewController.swift
//  CEDigital
//
//  Created by Riccardo Mija Padilla on 18/10/21.
//  Copyright Â© 2021 Riccardo Mija Padilla. All rights reserved.
//

import UIKit
import Lottie
import FaceTecSDK

class FacialRecognitionValidateViewController: GenericViewController, ViewControllerProtocol {
    
    
    var coordinator : FacialRecognitionValidateCoordinator?
    var registerPost: UserRegisterPost?
    private var facialSDK : FacialValidationSDK?
    
    private let viewModel = BiometricViewModel()
    
    
    @IBOutlet weak var lblSteps: UILabel!
    @IBOutlet weak var lanFacialValidation: LottieAnimationView!
    @IBOutlet weak var lblStartFacialValidation: UILabel!
    @IBOutlet weak var lblDisclaimer: UILabel!
    
    var latestProcessor: Processor!
    
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
        
        self.titleNavigationBar(title: "biometric_title".localized)
        
        self.initializeUI()
        self.setup()
        self.setupViewModel()
        
        
        // Initialize FaceTec SDK
        viewModel.doSetupFacialLoading(message: "facial_setup".localized)
        
        Config.initializeFaceTecSDKFromAutogeneratedConfig(completion: { initializationSuccessful in
            if(initializationSuccessful) {
                self.viewModel.doSetupFacialLoading(message: "")
            }else{
                self.viewModel.doSetupFacialLoading(message: "")
                self.showMsgAlert(title: "general_oops".localized, message: "facial_error_setup".localized, dismissAnimated: false)
            }
            
            
        })
        
        FaceTec.sdk.setCustomization(Config.currentCustomization)
        
        
    }
    
    // MARK: - Method
    func initializeUI() {
        
        lanFacialValidation.contentMode = .scaleAspectFit
        lanFacialValidation.loopMode = .loop
        lanFacialValidation.animationSpeed = 0.4
        lanFacialValidation.play()
        
        lblSteps = LabelFluentBuilder.init(label: lblSteps)
            .setTextColor(UIParameters.COLOR_GRAY_TEXT)
            .setText("facial_step".localized)
            .setTextSize(14, UIParameters.TTF_REGULAR)
            .build()
        
        lblStartFacialValidation = LabelFluentBuilder.init(label: lblStartFacialValidation)
            .setTextColor(UIParameters.COLOR_GRAY_BORDER)
            .setText("facial_verify".localized)
            .setTextSize(16, UIParameters.TTF_BOLD)
            .build()
        
        lblDisclaimer = LabelFluentBuilder.init(label: lblDisclaimer)
            .setTextColor(UIParameters.COLOR_PRIMARY)
            .setText("facial_disclaimer".localized)
            .setTextSize(12, UIParameters.TTF_LIGHT)
            .build()
    }
    
    func setup() {
        
        AppUtils.enableUIViewAsButton(view: lanFacialValidation, selector: #selector(onStartFacialValidationSDK), vc: self)
        AppUtils.enableUIViewAsButton(view: lblStartFacialValidation, selector: #selector(onStartFacialValidationSDK), vc: self)
    }
    
    func showModalPopUp(resultEnum : BiometricResultEnum, message : String){
        
        switch resultEnum {
        case .SUCCESS:
            self.coordinator?.coordinateToPopUp(viewController: self, delegate: self, biometricPopUp: BiometricLecturePopUp(title: "general_oops".localized, description: message, butAction: "general_continue".localized, image: "ic_success", resultEnum: .SUCCESS))
        case .ERROR:
            self.coordinator?.coordinateToPopUp(viewController: self, delegate: self, biometricPopUp: BiometricLecturePopUp(title: "general_oops".localized, description: message, butAction: "general_back".localized, image: "ic_error", resultEnum: .ERROR))
        }
    }
    
    func setupViewModel(){
        viewModel.tokenSession.bind {  response in
            guard response != nil else { return }
            
            self.facialSDK = FacialValidationSDK(tokenFacialRecognition: response!, delegate: self, fromViewController: self)
            
            self.facialSDK!.startFacialValidationSDK()
            
        }
        
        viewModel.facialValidatedIdentity.bind {  response in
            guard response != nil else { return }
            
            self.facialSDK?.processLivenessResponse(data: response!)
            DispatchQueue.main.async {
                self.showModalPopUp(resultEnum: .SUCCESS, message: "facial_success_description".localized)
            }
        }
        
        
        viewModel.onMessageError.bind {  error in
            guard error != nil else { return }
            
            self.facialSDK?.cancelLiveness()
            
            DispatchQueue.main.async {
                self.showModalPopUp(resultEnum: .ERROR, message: error!.body)
                
            }
        }
        
        
        viewModel.viewWithStringLoading.bind { message in
            guard message != nil else { return }
            
            if(message!.isEmpty){
                LoadingIndicatorView.hide()
            }else{
                LoadingIndicatorView.show(message!)
            }
            
        }
    }
    
    // MARK: - Notification
    
    @objc func onStartFacialValidationSDK(sender: UITapGestureRecognizer){
        viewModel.doGetTokenFacialRecognition(post: FacialTokenPost(isKey: Environment.faceToken, isNumeroDoc: registerPost!.sNumeroDoc))

    }
    
    
}


extension FacialRecognitionValidateViewController: FacialValidationProtocol {
    //This method launch after read the user's face
    func onFacialValidatedSDK(post: FacialValidationMigrationPost) {
        self.viewModel.doFacialValidationIdentity(post: post)
        //self.viewModel.doFacialValidationLiveness(post: post)
    }
    
    
    func onFacialValidatedFailure(message: String) {
        coordinator?.coordinateToPopUp(viewController: self, delegate: self, biometricPopUp: BiometricLecturePopUp(title: "general_oops".localized, description: message, butAction: "general_back".localized, image: "ic_error", resultEnum: .ERROR))
        
    }
}

extension FacialRecognitionValidateViewController : PopUpResponseProtocol {
    func onPopUpSuccess() {
        coordinator?.coordinateToGeneratePassword(registerPost: self.registerPost!)
    }
    
    func onPopUpError() {
        
    }

}


